from iforest import *
from knn import *
from kmeans import *
from mad import *

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from collections import Counter

np.random.seed(14)


##### Generating Test Dataset #####         - Cited in references
def generate_data(n=2000):
    """
    Description: Generate synthetic data to test algorithms
    Parameters:
        n - The number of data points to be generated by the function

    Returns: A synthesized dataframe
    """
    mean = [0, 0]
    cov = [[1, 0], [0, 1]]  # diagonal covariance

    x, y = np.random.multivariate_normal(mean, cov, n).T
    x[0], y[0] = 3.3, 3.3  # Add manual outlier
    x[100], y[100] = 4.5, 3

    df = np.array([x, y]).T
    df = pd.DataFrame(df, columns=['feat1', 'feat2'])

    plt.figure("Generated Dataset")
    plt.title(f"Random Generated Dataset with {n} points")
    plt.xlabel("Feature 1 of df")
    plt.ylabel("Feature 2 of df")
    plt.scatter(x, y, c='turquoise', marker='o', alpha=0.7)

    return df


##### Visualization of the anomalies #####
def visualise(df, algo):
    """
    Description: Visualise the anomalies detected by a particular algorithm on a DataFrame

    Parameters:
        df - DataFrame on which anomaly detection has been performed
        algo - The algorithm with which anomaly detection has been performed and stored in df with column name df[algo]

    Returns: None. Plots anomalies via matplotlib.
    """
    try:
        color = ['r' if val == 1 else 'g' for val in df[algo]]

        plt.figure()
        plt.title(f"{algo} Anomalies")
        plt.scatter(df['feat1'], df['feat2'], c=color, alpha=0.7)
        plt.xlabel("Feature 1 of df")
        plt.ylabel("Feature 2 of df")

    except KeyError:
        print(f"{algo} anomaly data not found!")


if __name__ == "__main__":
    # Generating Data
    df = generate_data()

    # Calling the algorithms
    iforest_pred(df=df, subspace=64, cntm=0.01, seed=14)

    # Visualising the anomalies detected by algorithms
    visualise(df, 'IForest')

    # knn_display_example()
    knn_display_example()

    plt.show()
    
    # Visualising for K-means
    df1 = generate_data()
    X = df1[['feat1', 'feat2']]
    obj = Kmeans(X, 5, 100)
    obj.Calc_dic()
    print("Centroids = ",obj.Centroids)
    
    plt.scatter(X["feat1"], X["feat2"], c='black')
    color = ['red', 'blue', 'green', 'cyan', 'magenta']
    labels = ['cluster1', 'cluster2', 'cluster3', 'cluster4', 'cluster5']
    for p in range(obj.K):
        la, lb = obj.cluster_list()
        plt.scatter(la, lb, c=color[p])

    plt.scatter(obj.Centroids[:, 0], obj.Centroids[:, 1], s=300, c='yellow', label='Centroids')
    plt.scatter(obj.outliers1['feat1'], obj.outliers1['feat2'], c='orange', s=100, label='Outliers')
    plt.xlabel('feat1')
    plt.ylabel('feat2')
    plt.legend()
    plt.title('Plot of data points')
    plt.show()
    
    print("Cluster label = ",obj.get_cluster_data(df1))

    print("Outliers = ",obj.get_outliers(df1))

    obj.WCSS_graph()


